"use strict";

class Model {
    constructor(mount, initial) {
        this.observable = new ObservableMap();   
        var databind = document.querySelector(mount).querySelectorAll("[data-bind]");
        Array.from(databind).forEach(elem => {
            let attribute = elem.dataset['bind'];
            if (elem.type == "checkbox")
                elem.addEventListener('change', () => this.set(attribute, elem.checked));
            else
                elem.addEventListener('input', () => this.set(attribute, elem.value));

            this.subscribe((key, value) => {
                if (attribute == key && (elem.tagName == "SPAN" || elem.tagName == "TEXT")) {
                    elem.innerHTML = value;
                    return;
                }
                if (attribute == key) {
                    if (elem.type == "checkbox")
                        elem.checked = value;
                    else elem.value = value;
                }
            });
        })
        this.initialize(initial);
    }

    initialize(initial, prefix)
    {
        Object.keys(initial).forEach(key => {
            if (typeof initial[key] != "object")
            {
               let currKey = prefix ? `${prefix}.${key}`:key;
               this.set(currKey,initial[key])
            }
            else this.initialize(initial[key], prefix ? `${prefix}.${key}` : key)
        })
    }

    subscribe(fn) {
        this.observable.subscribe(fn);
    }

    set(key, value) {
        this.observable.set(key, value);
    }

    get(key) {
        this.observable.get(key);
        //var keys = key.split(".");
        // if  (key.length == 1)
        //         return this.initial[key];
        //else
        //{
        // var object = this.initial;
        // for (var i=0;i<keys.length;i++)
        //    {
        //      if (typeof object[keys[i]]!='object' && typeof object[keys[i]]!="undefined") return object[keys[i]];
        //		 else							
        //		object = object[keys[i]];							
        //    }
        //}
    }

    toObject() {
        var obj = {}
        for (var i of this.observable) {
            var key = i[0].split(".")
            if (key.length == 1)
                obj[key] = i[1];
            else {
                var obj2 = obj;
                for (var j = 0; j < key.length; j++) {
                    if (j == key.length - 1)
                        obj2[key[j]] = i[1];
                    else {
                        if (typeof obj2[key[j]] == 'undefined') obj2[key[j]] = {};
                        obj2 = obj2[key[j]];
                    }
                }
            }
        }
        return obj;
    }
}

class ObservableMap extends Map {
    constructor() {
        super();
        this.listeners = [];
    }
    subscribe(callback) {
        this.listeners.push(callback)
        return () => this.listeners = this.listeners.filter(c => c != callback);
    }

    set(key, value) {
        super.set(key, value)
        this.listeners.forEach(listener => listener(key, value))
    }

}


window.Model = Model