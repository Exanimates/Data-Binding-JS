// function deepClone(object) {
//     if (typeof object != "object") return object
//    // let copy = {}
//    let key = Object.keys(object)
//   for (let i = 0; i < obj.length; i++) {
//       clone[i] = deepClone(obj[key])
//     }
// return clone
//   //  return copy
// }
 function deepClone(obj) {
  if (Array.isArray(obj)) {
    const clone = []
    for (let i = 0; i < obj.length; i++) {
      clone[i] = deepClone(obj[i])
    }
    return clone
  }
  if (obj instanceof Date) return new Date(obj.valueOf())
  if (!(obj instanceof Object)) return obj
  const clone = {}
  const keys = Object.keys(obj)
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i]
    clone[key] = deepClone(obj[keys[i]])
  }
  return clone
}

class Model {
    constructor(mount, initial) {
        this.mount = mount;
        this.initial = deepClone(initial);
        this.sub = [];
        var databind = document.querySelector(mount).querySelectorAll("[data-bind]");
        Array.from(databind).forEach(elem => {
            let bindTo = elem.dataset['bind']
            if (elem.tagName == "SPAN" || elem.tagName == "TEXT") 
                this.subscribe((key, value) => {
                    if (key == bindTo) elem.innerHTML = value
                })

            else if (elem.type == "checkbox") {
                elem.addEventListener('change', () => this.set(bindTo, elem.checked));
                this.subscribe((key, value) => {
                    if (key == bindTo) elem.checked = value
                })
            } else {
                elem.addEventListener('input', () => this.set(bindTo, elem.value));
                this.subscribe((key, value) => {
                    if (key == bindTo) elem.value = value
                })
            }
                            

            if (elem.type != "checkbox")
                elem.value = this.get(bindTo);
            if (elem.tagName == "SPAN" || elem.tagName == "TEXT")
                elem.innerHTML = this.get(bindTo);
        })
    }


    subscribe(fn) {
        this.sub.push(fn);
    }

    set(key, value) {
        var keys = key.split(".");
        if (key.length == 1)
            this.initial[key] = value;
        else {
            var object = this.initial;
            for (var i = 0; i < keys.length; i++) {
                if (typeof object[keys[i]] != 'object')
                    object[keys[i]] = value;
                else
                    object = object[keys[i]];
            }
        }
        this.sub.forEach(l => l(key, value));
    }

    get(key) {
        var keys = key.split(".");
        if (key.length == 1)
            return this.initial[key];
        else {
            var object = this.initial;
            for (var i = 0; i < keys.length; i++) {
                if (typeof object[keys[i]] != 'object')
                    return object[keys[i]];
                else
                    object = object[keys[i]];
            }
        }
    }

    toObject() {
        return deepClone(this.initial);
    }

}

window.Model = Model