class Model 
{
    constructor(mount, initial) 
    {
        this.Observable = new ObservableMap();
        this.initial=initial;
        var databind=document.querySelector(mount).querySelectorAll("[data-bind]");
        Array.from(databind).forEach(elem=>{                
            if (elem.type=="checkbox") 
                elem.addEventListener('change',()=>this.set(elem.dataset['bind'],elem.checked));
            else
            elem.addEventListener('input',()=>this.set(elem.dataset['bind'],elem.value));
             
            this.subscribe((key,value)=>{
                if (elem.dataset['bind']==key && (elem.tagName=="SPAN" || elem.tagName=="TEXT") )
                {
                    elem.innerHTML=value;
                    return;
                }       
                if (elem.dataset['bind'] == key)
                    {
                      if (elem.type=="checkbox")  
                      elem.checked = value;
                        else elem.value=value;
                    }                
                
            });         
        this.Observable.set(elem.dataset['bind'],this.get(elem.dataset['bind'])); 
        })      
    }
    
        
    subscribe(fn)
    {
        this.Observable.subscribe(fn);        
    }
    
    set(key, value)
    {
      this.Observable.set(key,value);
//        var keys = key.split(".");
//         if  (key.length == 1)
//		         this.initial[key] = value;
//          else			   
//			 {				
//				var object = this.initial;
//				for (var i=0;i<keys.length;i++)
//					{
//						if (typeof object[keys[i]]!='object')
//							object[keys[i]] = value;
//						else							
//						   object = object[keys[i]];							
//					}
//			 } 
	//  this.sub.forEach(l=>l(key,value));
    }

    get(key)
    {
        var keys = key.split(".");
         if  (key.length == 1)
		         return this.initial[key];
        else
        {
            var object = this.initial;
				for (var i=0;i<keys.length;i++)
					{
						if (typeof object[keys[i]]!='object' && typeof object[keys[i]]!="undefined")
							return object[keys[i]];
						else							
						   object = object[keys[i]];							
					}
        }
    }
    
    toObject(){
        var obj={}
       for (var i of this.Observable){
           var key = i[0].split(".")
           if (key.length == 1)
               obj[key]=i[1];
           else
           {
               var obj2=obj;
               for (var j=0;j<key.length;j++)
                   {
                       if (j == key.length-1)
                       obj2[key[j]] = i[1];
                       else
                           {
                               if (typeof obj2[key[j]]=='undefined')                           
                       obj2[key[j]]={};
                       obj2=obj2[key[j]];                  
                           }
                   }               
           }
       }
        return obj;
    }
    
}
class ObservableMap extends Map {
    constructor(){
        super();
        this.listeners=[];
    }
   subscribe(callback) {
   this.listeners.push(callback)
   return () => this.listeners = this.listeners.filter(c => c != callback);
}
   
   set(key, value) {
    super.set(key, value)
    this.listeners.forEach(listener => listener(key, value))
   }
     
}
